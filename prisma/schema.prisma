generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  superAdmin
  admin
  user
}

enum UserStatus {
  active
  banned
  deleted
}

enum UploadType {
  file
  form
  api
}

enum UploadStatus {
  pending
  processing
  completed
  failed
}

enum FicheStatus {
  valid
  suspended
  canceled
}

enum DocumentType {
  File
  Message
  Attachment
}

// Models
model User {
  id        String     @id @default(uuid()) @db.Uuid
  username  String     @unique @db.VarChar(32)
  password  String     @db.VarChar(64)
  role      UserRole   @default(user)
  status    UserStatus @default(active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  createdBy String?    @db.Uuid
  groupId   String?    @db.Uuid

  permissions Permission[] @relation("UserPermissions")
  group       Group?       @relation("UserGroup", fields: [groupId], references: [id], onDelete: SetNull)
  uploads     Upload[]     @relation("UserUploads")
}

model Permission {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?

  users User[] @relation("UserPermissions")
}

model Upload {
  id          String       @id @default(uuid()) @db.Uuid
  displayName String       @unique @db.VarChar(50)
  date        DateTime     @default(now())
  type        UploadType
  status      UploadStatus @default(pending)
  fileName    String       @db.VarChar(255)
  path        String       @unique @db.VarChar(100)
  hash        String       @unique @db.VarChar(64)
  userId      String       @db.Uuid

  user   User    @relation("UserUploads", fields: [userId], references: [id], onDelete: Cascade)
  fiches Fiche[] @relation("UploadFiches")
}

model Source {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique @db.VarChar(30)
  description String?

  fiches Fiche[] @relation("SourceFiches")
  groups Group[] @relation("GroupSources")
}

model Fiche {
  id             String      @id @default(uuid()) @db.Uuid
  ref            String      @unique @db.VarChar(32)
  sourceId       String      @db.Uuid
  date           DateTime    @default(now())
  object         String
  summary        String
  createdBy      String?
  dateDistribute DateTime?
  status         FicheStatus @default(suspended)
  path           String      @unique
  hash           String      @unique @db.VarChar(64)
  uploadId       String      @db.Uuid
  dump           String?     @db.VarChar(50)

  source    Source     @relation("SourceFiches", fields: [sourceId], references: [id], onDelete: Cascade)
  upload    Upload     @relation("UploadFiches", fields: [uploadId], references: [id], onDelete: Cascade)
  documents Document[] @relation("FicheDocuments")
}

model Document {
  id       String       @id @default(uuid()) @db.Uuid
  type     DocumentType
  ficheId  String       @db.Uuid
  fileName String
  path     String       @unique
  hash     String       @unique @db.VarChar(64)
  origin   Json?

  content  String?
  dumpInfo Json?
  meta     Json?

  fiche Fiche @relation("FicheDocuments", fields: [ficheId], references: [id], onDelete: Cascade)
}

model Group {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique

  users   User[]   @relation("UserGroup")
  sources Source[] @relation("GroupSources")
}
